---
layout:     post
title:      git常用命令总结
subtitle:   git常用命令总结
date:       2017-12-23
author:     mushuzi
header-img: img/post-bg-ios9-web.jpg
catalog: true
tags:
    - Git
--- 

# 前言
剑指offer中的面试题6：从尾到头打印一个单链表。

# 正文
分析：单链表是单向的，只有一个从前向后的next指针，要想获取下一个节点，必须先访问到其之前的节点。那么如何才能从尾到头访问节点的值呢？本文结合《剑指offer》中的分析，给出三种解法。
 
## 解法一
访问链表只能按照从前到后的顺序（可以理解为读入），而题目要求从后向前打印（可以理解为输出），从读入到输出，实际上是一个后进先出的过程，自然而然想到用栈来实现。声明一个栈，首先将链表节点存入栈中，然后再依次出栈，就可以完成从尾到头打印链表节点了。代码如下：

    public ArrayList<Integer> printListFromTailToHead1(ListNode listNode) {
        ArrayList<Integer> list = new ArrayList<>();
        if(listNode == null)
        return list;        
        Stack<ListNode> stack = new Stack<>();
        while(listNode != null){            
            stack.push(listNode);
            listNode = listNode.next;
        }        
        while(!stack.isEmpty()){            
            ListNode cur = stack.pop();
            list.add(cur.val);
        }
        return list;
    }
    
## 解法二 
既然想到了用栈来实现上述功能，而递归本质上就是一个栈结构，因此也可以用递归来实现。每次访问到一个节点的时候，先递归输出它后面的节点，再输出该节点本身，这样就可以从尾到头打印链表了。

    public ArrayList<Integer> printListFromTailToHead2(ListNode listNode) {
        ArrayList<Integer> list = new ArrayList<>();
        if(listNode == null)
            return list;
        addNodeVal(listNode, list);
        return list;
    }
    
    public void addNodeVal(ListNode listNode, ArrayList<Integer> list){
        if(listNode == null)
            return;

        if(listNode != null){
        	if(listNode.next != null)
        		addNodeVal(listNode.next, list);
        	list.add(listNode.val);
        }
    }
    
上述代码的递归逻辑集中在addNodeVal方法中，将每次访问到的节点值添加进list当中，最后调用该addNodeVal方法即可。同时还要注意一点，不论是递归代码的书写，还是循环代码的书写，都要注意正确书写递归终止条件和循环终止条件。
 
最后针对递归本身，虽然递归的代码很简洁，但是其鲁棒性不高。因为当链表非常长的时候，可能会导致函数调用的层级很深，从而导致函数调用栈的溢出。
 
## 解法三 
上述两种解法从算法的角度上对问题进行了分析，但还有一种更简单更易理解的方法，即使用Java自带的ArrayList类。该类具有的add()方法支持在Arraylist的指定索引上添加元素。因此我们依旧可以“一如既往”从前向后访问链表，只不过把后访问到的链表值插入到list的最前面即可。这个方法从理解到实现都是相当容易的。代码如下：
 
    public ArrayList<Integer> printListFromTailToHead3(ListNode listNode) {
        ArrayList<Integer> list = new ArrayList<>();
        if(listNode == null)
            return list;
        while(listNode != null){
            list.add(0, listNode.val);
            listNode = listNode.next;
        }
        return list;
    }
 
